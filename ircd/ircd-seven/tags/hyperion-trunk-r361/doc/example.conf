#   IRC - Internet Relay Chat, doc/example.conf
#   Copyright (C) 1992, Bill Wisner
#
#   Modified by Rodder, Jon Lusky <lusky@blown.net>,
#   at one time, but he didn't credit his changes.
#   Updated Dec 19, 1997 Diane Bruce aka db/Dianora <db@db.net>
#   please also read example.conf.trillian, it covers
#   elements this example misses.
#   -db
#   Updated again July 17, 1998 -db
#   Updated 990102 to take out P: line connection limiting code
#   Updated again July 5, 1999 -db
#   Updated for dancer 2000/08/04 -- asuffield
#   Updated for hyperion 2005 -- jilles
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 1, or (at your option)
#   any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#
# IRC example configuration file
#
# This file describes the information that should be present in your IRC
# configuration and how to present it.
#
# M: set your server's name. Fields are, in order, server name (must contain
#  a period and be unique on the IRC network), optional bind address, a text
#  description, and unused.
#
# NOTE:  The "optional bind address" is an address used in binding to a
# local address when we connect outbound.  For example, if your server machine
# is myhost.example.com (192.168.1.5) and you want IRCD to connect to others
# from irc.example.com (192.168.1.250), you'd put 192.168.1.250 in the
# "optional bind address" field.  If left blank, UNIX will choose the primary
# address of the interface closest to the destination.
#
# NOTE:  As of hybrid-6, the port field no longer binds a port by default.
# It is an inoperative and obsolete field.
#
M:localhost.::hyperion test server:
#M:localhost.:192.168.1.250:hyperion test server:
# 
# A: administrative information. This line should have three fields, which
#    may contain any arbitrary text. It is printed by the /ADMIN command.
#
A:Example location:My address:Inept server admin <dancer@localhost>
#
# F: features. These are global settings. First field is the name of the
# setting, second field is the value.
#
# nickprefix: ASCII code of the character to be put before unregistered nicks.
# The only supported values are 0 (disable) and 126 (tilde).
# More precisely, every local nick setting and change is checked against the
# allowed nicks set by SVSLOGIN, and if it doesn't match, the nickprefix
# is prepended. This implies that every initial nick will start with the
# nickprefix. I:lines will ignore the nickprefix.
F:nickprefix:0
# identd_prefix, noidentd_prefix: strings to prefix usernames with
# on connection. This does not affect usernames set via SETIDENT or
# SVSLOGIN. Supported values are the empty string, a tilde or a letter
# followed by an equals sign.
F:identd_prefix:
F:noidentd_prefix:~
# identifyservice, identifycommand: nickname and command to use for
# automatic identify via server password. If the I:line had no password
# but the user specified a server password anyway, send a PRIVMSG
# with <identifycommand> <password> to <identifyservice>. Make sure
# that <identifyservice> is Q:lined. Set either to the empty string
# to disable.
F:identifyservice:NickServ
F:identifycommand:IDENTIFY
# dopingout: determines how quickly clients that fail to reply to pings
# will be exited for ping timeout. The traditional behaviour (1) is after
# <ping frequency> (2 * <ping frequency> total idle time). Disabling this
# only exits after 10 * <ping frequency>, possibly making it harder for
# kiddies to ping out many clients at the same time, at the cost of
# leaving stuff that should be dead lying around longer (mainly an issue
# when running without nick registration services or with services that
# do things when channels become opless).
F:dopingout:1
# noidprivmsg: set all new clients +E and assume all unidentified clients
# are +E (no privmsg from unidentified clients)
F:noidprivmsg:0
# noidprivmsg_notice: A custom message to use if you want to use
# noidprivmsg.
F:noidprivmsg_notice:Due to bot attacks, PRIVMSG has been disabled for unauthenticated users.
# default_umode: Umode to set on new clients. Only user umodes can be used
# here. Plus and minus signs and the like are ignored, everything is set.
# Use +E here for a weaker noidprivmsg that allows anyone to receive privmsg
# from unidentified clients).
F:default_umode:+

#
# Y: define connection class.  A class must be defined in a Y: line before
#    it is used in a C, N, or I line.  The fields are, in order, class number,
#    ping frequency in seconds, connect frequency in seconds, maximum
#    number of links, size of sendq, local per-IP limit and global
#    per-IP limit.
#
# For servers, the maximum number of links limits auto-connecting, not the
# servers connecting otherwise. A sendq of at least 4mb is recommended if
# not more. The local and global per-IP limits are not used.
#
# For clients, the connect frequency field is not used. The local and global
# per-IP limits set the maximum number of connects from same IP address. i.e.
# setting this field to '1' will limit every user using this Y, to one
# connection per IP address.  Leaving them blank or 0 will disable any such
# checking. Note: /stats y will show these fields in <number>.<number> format
# a la ircnet, but per-user@ip limits are not actually supported. /stats y
# also includes the number of local clients using the class at the very end
# of the line.
#
# N.B. Y lines must be defined before I lines and O lines, since
# both I lines and O lines make reference to Y lines or classes.
#
# Class numbers must be positive to ensure future modification of ircd to
# use -1 internally could not be complicated with it's use externally.
#
# Clients: 5 local connections, 8 global (arbitrary)
Y:1:180:::100000:5:8
# Servers: don't autoconnect if already connected in this class
# (good for leaves)
Y:2:180:300:1:4000000

# .sep lines change the separator in conf lines to the given character
# ircd.conf and include files default to a colon, kline.conf and
# dline.conf default to a percent sign. k/d-lines added by ircd always
# use the percent sign separator. The chosen field separator cannot
# be used inside fields.
#.sep %
#
# .include lines, insert a file from DPATH directory into the conf
# you could use this to insert a common file between several
# ircd's if you wished. include files are handled after all the
# other lines in the conf file are done. i.e. a .include is always
# as if it was at the end of the conf file and return to ':' field
# separator.
# 
# This brings in the external O:lines file, if there is one
.include "olines.conf"

#
# I: authorize clients to connect to your server. You can use domains,
#    IP addresses, and asterisk wildcards. The second field can contain a
#    password that the client must use in order to be allowed to connect.
#    The optional fifth field may contain a connection class number.
#
#I:::*.alaska.edu::1
#I::password:acad3.alaska.edu::1
#
#    If using IDENT, to activate it, you need to place a "user@" in the
#    host segment.
#
#I:::*@acad3.alaska.edu::1
#I:::root@acad.alaska.edu::1
#
# The above are bad examples of I-lines, what really happens is something
# like this:
#

I:::*@*::1

# You can also limit the number of connections from one host
# to any value. This can be used to stop cloners
#
# i.e.
# Allow 100 users in a "bad boy" class, but allow only ONE
# user per IP to connect at a time, on the whole net
#
#Y:3:90::100:100000:1:1
#
# Remember to put your "bad boy" I line last in the file, so it
# seen first and matches first before your standard I lines
#
# With hybrid ircd, max connections is taken from the class
# not per I line. i.e. the 3 I lines following will always add
# up to 100 or less, not 100 per I line.
#
#I:::*@*ppp*::3
#I:::*@*slip*::3
#I:::*@*ts*::3
#
# a name pattern in the first field will never cause a match since it's only
# ever matched against an IP# in the form a.b.c.d and a number in the third
# field will never match since a hostname is always compared against this
# field.  The '@' needs to be in the IP# section for ident to be used.

#
## additional prefix characters in I lines are defined
##
## from comstud
##
## 1) There are noticable differences in I: lines now.
##   There are 4 special characters that you can stick in front
##   of a hostname or ip# that do special things.
##   These characers are:
##   -  This will make the username as if they're running identd even if they
##      may not be
##   +  This will force people matching this I: to require identd
##   !  This means to only allow 1 connection per ip# in this I:
##   $  (Not used in hybrid)
##
##  Examples:
##
## a) I:::!*@*ppp*::class  will only allow X connections per ip# for people
##     who have *ppp* in their hostname where X is given in the Y: line.
##    If there is no ! and you have a limit in your Y: line, then it matches
##      full user@host instead of just host.

## b) I:::-*@*.cris.com::class will use identd_prefix, even though they may
##     not be running identd.  (This is equivilent to the old way of not
##    specifying a @ in the I: line).

## Additionally since ircd-hybrid-6
## B/E/F lines were removed and replaced with 3 other special characters
## in I lines
## 
## ^ This will exempt a user from K/X lines, limited protection from D lines
## & User can run bots (old B line)
## > This user is exempt from I line/server side connection limits
##   (old F line)
##
## A variant of amm's spoofing code was added
## = Spoof this users IP, normally only used for opers
## / Turn on the spoof at connection (you always want this with =)
##
## < This user is exempt from idle restrictions if IDLE_CHECK is defined
##

## Examples
## c) I:NOMATCH::^db@koruna.varner.com::3
##    This user is exempt from k/g lines
## d) I:NOMATCH::&jerdfelt@*mindspring.net::3
##    This user can run a bot, and is also "e lined"
## e) I:NOMATCH::>lusky@*vol.com::3
##    This user is immune from I line limits
## f) I:NOMATCH::^&>mpearce@*varner.com::3
##    This user can run a bot, is exempt
##    from client connect limits.
## g) I:smurfers.are.lame::=/dgalas@*somewhere.com::3
##    Show this user as being dgalas@smurfers.are.lame
##    an IP can be used instead as long as the name field does not begin 
##    with an 'x'
##    i.e. 
##    I:192.168.0.0/24::x::3 #this is an IP I line
##    I:192.168.0.0::db@*somesite.com::3 #this is a spoofed IP	
#
#I:test/staff/jilles:<password>:=/&>^jilles@*.stack.nl::1
#I:test/staff/jilles:<password>:=/&>^jilles_@*.stack.nl::1
#
# O: authorize operators. Fields are, in order, host name the operator must
#    be logged in from (wildcards allowed), operator's password, operator's
#    nickname.
##

## O:lines are better described in the dancer-oper-guide than here
## The new format for dancer has the 4th field (port) as the allowed umodes,
##  and the 6th field (after the connection class) as the default umodes to
##  be set on OPER.
## The fifth field of an O line is the new class this oper will join
# Examples:

# the encrypted password here is: password
O:*:$1$nmNi3oKw$/TTB9SfKK3.KPYfKBYLy20:admin:aAbcdDfFGhHkKlmMnNpPrRsSTuUvVWxXyYzZ01234569*@:1:AcdDfFGhHkKlRsSTuUvVwWXyYzZ01234569
#O:*:$1$nmNi3oKw$/TTB9SfKK3.KPYfKBYLy20:minimal:TuzZ6:1:uzZ6
#O:*:$1$nmNi3oKw$/TTB9SfKK3.KPYfKBYLy20:traditional:AbcdDfFGhHkKMrRsSTuUvVWxXyYzZ01234569:1:ADFGhHkKRsSuUvVwWxXYzZ01234569
#O:*:$1$nmNi3oKw$/TTB9SfKK3.KPYfKBYLy20:example1:bcfGhHkKrsTuyzZ1269:1:bfFGhHkKrsuUzZ1269
#O:*:$1$nmNi3oKw$/TTB9SfKK3.KPYfKBYLy20:example2:AdDhRsSTVuxYzZ6:1:AdhRsSVuxYzZ6
#O:*:$1$nmNi3oKw$/TTB9SfKK3.KPYfKBYLy20:luser::1:
#O:*@test/staff/jilles:<password>:jilles:aAbBcdDfFGhHkKlmMnNpPrRsSTuUvVWxXyYzZ01234569*@:1:AcdDfFGhHkKlRsSTuUvVwWXyYzZ01234569

# C:, N: set up connections to other servers.
#
# C: specifies a server that your server may connect to.
# N: allows a remote server to connect to your own.
#
# The two lines must be given in pairs if the servers are to connect. A sole
# N: line is needed for servers that should appear in /LINKS but are never
# directly linked to this server. It is strongly suggested that opers
# use /MAP for seeing which servers are connected to the network.
#
# The first field contains the IP address or primary hostname of the other
# server. The third field contains the server name of the other server
# which must agree with that server's M: line and must contain a dot, but
# need not be equal to any DNS name.
#
# These lines may contain a password in the second field.  In fact, to
# maintain proper security, *all* IRC server links must have passwords.
#
# If a C: line contains four fields (the fourth being a TCP port number)
# IRC will actively try to connect to that server. You should have at least
# one such line.
#
# If an N: line contains four fields, the fourth should contain a number that
# specifies how many components of your own server's name to strip off the
# front and be replaced with a *.  This is done to implement hostmasking.
# For example, to make hayes.ims.alaska.edu present itself to the world as
# *.alaska.edu, I would use a 2 (to strip off the first two parts).  If you
# use this, be sure to tell the administrator of the servers you link to --
# they must add your hostmasked name to their configuration file or you will
# be unable to connect.
#
# Note that server hostmasking is considered obsolete and you should
# not complain to the developers if it does not work.
# -- jilles
#
# The host part of C/N lines MUST contain a valid hostname or IP address
# The host part in the C:line MUST be identical to the host part in the N:line
# The name part of the C/N lines MUST match the associated H/L line name
# 
# The fifth field may contain a connection class number.
#
# The following two lines tell my server to try connecting to
# byron.u.washington.edu, assuming their server name is also
# byron.u.washington.edu.
#
#C:byron.u.washington.edu:crunchyfrog:byron.u.washington.edu:6667:2
#N:byron.u.washington.edu:$1$iDEU4WvG$s0yqN2EWgtr52Gh0fbjrF/:byron.u.washington.edu::2
#
# The following two lines allow a server to connect to my server, but my
# server will not make any attempt to connect to it.
#
#C:kaja.gi.alaska.edu:llamas:kaja.gi.alaska.edu::2
#N:kaja.gi.alaska.edu:$1$EUvEAOz6$CuWo/VDblcZ6hEiKDhOle0:kaja.gi.alaska.edu::2
#
# C and N lines may also use the "user@" combination in the same way as
# the I-lines.
#
#C:wisner@kaja.gi.alaska.edu:llamas:kaja.gi.alaska.edu::2
#N:wisner@kaja.gi.alaska.edu:$1$EUvEAOz6$CuWo/VDblcZ6hEiKDhOle0:kaja.gi.alaska.edu::2

# Another example
#C:999.999.999.999:<password>:irc.somewhere:6667:2
#N:999.999.999.999:<encrypted password>:irc.somewhere::2

# Example for linking services running on the same machine as this ircd
# Note that dancer-services/theia do not check the password in the C:line
# while atheme does.
#C:127.0.0.1:<password>:services.::2
#N:127.0.0.1:<encrypted password>:services.::2

## The password in the N:line is usually an MD5 hash, not cleartext
## It must match the password in the C:line on the remote server.
## For serious security, the two servers should have different passwords
##  in their C lines, with each other's hash in their N lines.
@:REMOVE ME. This line checks you've been reading.

#
# K: kill a user automatically upon connecting.  This is used to deny
#    troublesome users access to your server.  The fields are, in order,
#    hostname (wildcards are allowed), time of day, and username.

## Timed k-lines and R: lines are not recommended by the hybrid
## team. They might not even work. Timed-klines made more sense
## for university ircd's but nowadays with so many open irc servers
## around, it just seems pointless.
## -Dianora

# The second example restricts access from acad3.alaska.edu from
# 9:00am to noon, and 2:00pm to 5:00pm.  This form is only supported if
# TIMED_KLINES is defined.
#
#K:*.alaska.edu::FSSPR
#K:acad3.alaska.edu:0900-1200,1400-1700:*

# Note: it is preferable to place and remove K:lines from a running
# ircd, with the KLINE and UNKLINE commands, which write to the kline.conf
# file directly, in order to handle timestampts and distribution
# across the network cleanly.

#
# R: restrict user access.  This is an extended form of the K: line.
#    It looks for a match then runs an outside program that will determine
#    whether the person should be allowed on.  The fields are hostname,
#    program, and username.  A full pathname to the program should be used.
#    The output of the program should be a string of the form "Y <message>"
#    to allow the user, or "N <message>" to block them.  In the first case
#    the message is ignored; in the latter, it is sent as an error message
#    to the user.  R: lines are only functional if activated in config.h.
#
#R:kaja.gi.alaska.edu:/usr/local/lib/irc/does-eric-get-in:ejo
#
## NOTE: L:lines are not really appropriate for centrally maintained
##  networks. It is not recommended that you use them.
#
# L: leaf.  This forces the server listed to act as a leaf.  If such a
#    server allows any other servers to connect to it, its link is
#    dropped. If a port parameter is non-zero, it is used to control the
#    maximum depth that link will allow, where depth is the tree depth of
#    that branch.
#
#L:::kaja.gi.alaska.edu
#L:::cm5.eng.umd.edu:1
#
#    A new extension to the L-line allows you to be selective
#    about which other servers you wish the connecting server to behave as
#    as a leaf towards.  The following would not allow any server connecting
#    with a name that matches *.fi to introduce a server matching *.edu.
#
#L:*.edu::*.fi
#
# H: Hub.  This is required to allow other servers which connect to you as
#    a hub and introduce other servers.
#
#H:*.au:*:*.au
H:*::*
#
# P : port. The port line allows the server to listen on various ports for
#     connections.  Fields in order: unused,
#     address to bind to, unused, port to listen on
#
# NOTE:  As of hybrid-6, you MUST have at least one P: line defining a port
# to listen on, or the server won't do much.
#
P::::6667
#P::209.42.128.252::31337
#
# Also listen to port 31337 on only 209.42.128.252.
#
# D : dump.  Dumps all connect attempts from the matched IP
# without any procesing.
#
#     First arg is target IP and CIDR mask, second is a comment.
#
#D:208.148.84.3:bot host that changes domain names frequently
#D:128.183.0/24:NASA users aren't supposed to be on IRC
#
# d : immunity to D dump
# As in D line , First arg is targe IP and CIDR mask, second is a comment.
#
#d:199.0.154.0/24:Don't D line ais.net:

#
#
# Q lines, not the old server Q lines, but Quarantine lines for
# nicks. Only checked at NICK time, i.e. if added and hashed in
# will not kill users who match this nick.
#
# Leave these reserved, it is the only way to prevent people
# from grabbing messages for services if they are down
Q:NickServ:services impersonation
Q:ChanServ:services impersonation
Q:OperServ:services impersonation
Q:MemoServ:services impersonation
Q:AuthServ:services impersonation
Q:UserServ:services impersonation
#Q:dcc-*:dcc bots not allowed on this server
#Q:lamestbot:You have to be kidding me
#Q:[evil]-*:Evil drones with nicks starting with [evil]
#Q:crush:In memory of Janet Pippin
#Q:cwush:In memory of Janet Pippin
#Q:callas:Only allowed from this host:callas@oper.irc.arpa.com

#
# if Q_LINE_JUPE_CHANNEL is defined you can also jupe a channel locally
#
## NOTE: Q_LINE_JUPE_CHANNEL is not defined by default. This may change
##  later when it can be arranged for a jupe to propagate across all
##  servers more effectively.
#
# i.e. no one on your server can join this channel.
# You need the backslash to escape the # in the channel
#
#Q:\#packet:I am tired of the packet fights for this channel
#
# X lines.
# Used to match gecos fields and prohibit users or warn about users
# who have matching strings in those fields from getting on the server.
#
# On an X line, a non 0 value for port exits that client
# a 0 value, warns opers with umode +r
#
# These three examples only warn
#X:*www*:Possible spambot warning 1::0
#X:*http*:Possible spambot warning 2::0
#X:*sex*:Possible spambot warning 3::0
#
# These two examples reject the client
# use this to reject IPHONE users
#X:* vc:IPHONE user::1
# This is a very probable spambot
#X:*see me at*:This has GOT to be a spambot::1
#X:*hi baby*:This has GOT to be a spambot::1
#
# Temporarily change the conf separator to do things with colons in them
#.sep %
#X%*http://*%No urls allowed%%1
#.sep :
